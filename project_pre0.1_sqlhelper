import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.*;
import java.util.ArrayList;
import java.util.Scanner;

public class SQLHelper {
    public static void fullReport(String url, String user, String password) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try (Connection conn = DriverManager.getConnection(url, user, password)) {
                Statement statement = conn.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT * FROM base");
                while (resultSet.next()) {
                    int id = resultSet.getInt("ID");
                    String description = resultSet.getString("Description");
                    String type = resultSet.getString("Type");
                    BigDecimal money = resultSet.getBigDecimal("Money");
                    Timestamp date = resultSet.getTimestamp("Date");
                    System.out.println(id+ "." + description + " - " + type + " - " + money + " - " + date);
                }
            }
        }
        catch (Exception ex) {
            System.out.println("Something went wrong...");
            System.out.println(ex);
        }
    }
    public static void addRevenue(String url, String user, String password, Scanner scanner) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try (Connection conn = DriverManager.getConnection(url, user, password)) {
                Statement statement = conn.createStatement();
                System.out.println("Enter Description: ");
                String description = "";
                int i = 0;
                while (scanner.hasNextLine() && i  < 2) {
                    description = scanner.nextLine();
                    if (description != null && description.equals("") != true) {
                        break;
                    }
                }
                System.out.println("Enter sum of revenue: ");
                BigDecimal sum = scanner.nextBigDecimal();
                statement.executeUpdate("INSERT base(Description, Type, Money) VALUES ('" + description + "', " + "'Revenue', " + sum + ")");
                System.out.println("DB updated");
            }
        }
        catch (Exception ex) {
            System.out.println("Something went wrong...");
            System.out.println(ex);
        }
    }
    public static void addExpense(String url, String user, String password, Scanner scanner) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try (Connection conn = DriverManager.getConnection(url, user, password)) {
                Statement statement = conn.createStatement();
                System.out.println("Enter Description: ");
                String description = "";
                int i = 0;
                while (scanner.hasNextLine() && i  < 2) {
                    description = scanner.nextLine();
                    if (description != null && description.equals("") != true) {
                        break;
                    }
                }
                System.out.println("Enter sum of expense: ");
                BigDecimal sum = scanner.nextBigDecimal();
                statement.executeUpdate("INSERT base(Description, Type, Money) VALUES ('" + description + "', " + "'Expense', " + sum + ")");
                System.out.println("DB updated");
            }
        }
        catch (Exception ex) {
            System.out.println("Something went wrong...");
            System.out.println(ex);
        }
    }
    public static void checkConnection(String url, String user, String password) {
        try{
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try(Connection connection = DriverManager.getConnection(url,user,password)) {
                System.out.println("Connection to DB succesfull");
            }
        }
        catch (Exception ex) {
            System.out.println("Connection failed");
            System.out.println(ex);
        }
    }
    public static void shortReport(String url, String user, String password) {
        try{
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try(Connection connection = DriverManager.getConnection(url,user,password)) {
                PreparedStatement statement = connection.prepareStatement("select sum(Money) from base where Type='Revenue'");
                ResultSet result = statement.executeQuery();
                result.next();
                String sum = result.getString(1);
                System.out.println("Revenue sum: " + sum);
                BigDecimal revenue = new BigDecimal(sum);
                statement = connection.prepareStatement("select sum(Money) from base where Type='Expense'");
                result = statement.executeQuery();
                result.next();
                sum = result.getString(1);
                System.out.println("Expense sum: " + sum);
                BigDecimal expense = new BigDecimal(sum);
                BigDecimal profit = revenue.subtract(expense);
                System.out.println("Profit: " + profit);
            }
        }
        catch (Exception ex) {
            System.out.println("Connection failed");
            System.out.println(ex);
        }
    }
    public static void expenseStats(String url, String user, String password) {
        try{
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try(Connection connection = DriverManager.getConnection(url,user,password)) {
                Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT DISTINCT Description FROM base WHERE Type='Expense'");
                ArrayList<String> help = new ArrayList<>();
                ArrayList<BigDecimal> sum = new ArrayList<>();
                while (resultSet.next()) {
                    help.add(resultSet.getString(1));
                }
                for (int j = 0; j < help.size(); j++) {
                    resultSet = statement.executeQuery("SELECT SUM(Money) from base WHERE Description='" + help.get(j)+"'");
                    resultSet.next();
                    sum.add(resultSet.getBigDecimal(1));
                }
                PreparedStatement statement1 = connection.prepareStatement("select sum(Money) from base where Type='Expense'");
                ResultSet result = statement1.executeQuery();
                result.next();
                BigDecimal sum1 = result.getBigDecimal(1);
                System.out.println("Expense sum: " + sum1);
                BigDecimal decimalProcent = new BigDecimal("100");
                for (int j = 0; j < help.size(); j++) {
                    System.out.println(help.get(j) + ": " + decimalProcent.multiply((sum.get(j)).divide(sum1, 2, RoundingMode.HALF_UP)) + "%");
                }
            }
        }
        catch (Exception ex) {
            System.out.println("Connection failed");
            System.out.println(ex);
        }
    }
    public static void revenueStats(String url, String user, String password) {
        try{
            Class.forName("com.mysql.cj.jdbc.Driver").getDeclaredConstructor().newInstance();
            try(Connection connection = DriverManager.getConnection(url,user,password)) {
                Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT DISTINCT Description FROM base WHERE Type='Revenue'");
                ArrayList<String> help = new ArrayList<>();
                ArrayList<BigDecimal> sum = new ArrayList<>();
                while (resultSet.next()) {
                    help.add(resultSet.getString(1));
                }
                for (int j = 0; j < help.size(); j++) {
                    resultSet = statement.executeQuery("SELECT SUM(Money) from base WHERE Description='" + help.get(j) + "'");
                    resultSet.next();
                    sum.add(resultSet.getBigDecimal(1));
                }
                PreparedStatement statement1 = connection.prepareStatement("select sum(Money) from base where Type='Revenue'");
                ResultSet result = statement1.executeQuery();
                result.next();
                BigDecimal sum1 = result.getBigDecimal(1);
                System.out.println("Revenue sum: " + sum1);
                BigDecimal decimalProcent = new BigDecimal("100");
                for (int j = 0; j < help.size(); j++) {
                    System.out.println(help.get(j) + ": " + decimalProcent.multiply((sum.get(j)).divide(sum1, 2, RoundingMode.HALF_UP)) + "%");
                }
            }
        }
        catch (Exception ex) {
            System.out.println("Connection failed");
            System.out.println(ex);
        }
    }
}
